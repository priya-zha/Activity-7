{"mappings":"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","sources":["index.js"],"sourcesContent":["//import { csv, select, scaleOrdinal, schemeCategory10, rollup, pie, arc } from 'd3';\r\n//import { scatterPlot } from './scatterPlot';\r\n//console.log(\"D3 Version:\", d3.version);\r\n\r\n// GitHub Gist URL containing the CSV data\r\nconst csvUrl = 'https://gist.githubusercontent.com/priya-zha/d89852ea8864c23b2af402c67f635973/raw/6ebc0a376c35adb05054091217541923d52f2726/penguins.csv';\r\nconsole.log(\"D3 Version:\", d3.version);\r\n\r\n// Function to parse the CSV and count species occurrences\r\nconst parseData = async () => {\r\n  const data = await d3.csv(csvUrl);\r\n\r\n  // Check if Species column exists\r\n  if (!data[0].Species) {\r\n    console.error(\"Column 'Species' not found in CSV!\");\r\n    return [];\r\n  }\r\n\r\n  // Count the occurrences of each species\r\n  const speciesCount = d3.rollup(data, v => v.length, d => d.Species);\r\n\r\n  // Prepare the pie chart data\r\n  return Array.from(speciesCount, ([Species, count]) => ({ Species, count }));\r\n};\r\n\r\n// Set dimensions for the pie chart\r\nconst width = 400;\r\nconst height = 400;\r\nconst radius = Math.min(width, height) / 2;\r\n\r\n// Create the SVG container\r\nconst svg = d3.select(\"#pieChart\")\r\n    .attr(\"width\", width)\r\n    .attr(\"height\", height)\r\n  .append(\"g\")\r\n    .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\r\n\r\n// Create the color scale\r\nconst color = d3.scaleOrdinal(d3.schemeCategory10);\r\n\r\n// ✅ Rename `pie` to `pieGenerator` to avoid conflicts\r\nconst pieGenerator = d3.pie().value(d => d.count);\r\n\r\n// ✅ Rename `arc` to `arcGenerator` to avoid conflicts\r\nconst arcGenerator = d3.arc().innerRadius(0).outerRadius(radius);\r\n\r\n// Function to draw the chart\r\nconst drawChart = (pieData) => {\r\n  if (pieData.length === 0) {\r\n    console.error(\"No data to display in pie chart.\");\r\n    return;\r\n  }\r\n\r\n  // Calculate total count for percentage calculation\r\n  const total = d3.sum(pieData, d => d.count);\r\n\r\n  // Draw the pie chart slices\r\n  const arcs = svg.selectAll(\"arc\")\r\n    .data(pieGenerator(pieData))\r\n    .enter()\r\n    .append(\"g\")\r\n    .attr(\"class\", \"arc\");\r\n\r\n  arcs.append(\"path\")\r\n    .attr(\"d\", arcGenerator)\r\n    .attr(\"fill\", d => color(d.data.Species));\r\n\r\n  // ✅ Append text labels with percentages\r\n  arcs.append(\"text\")\r\n    .attr(\"transform\", d => `translate(${arcGenerator.centroid(d)})`)\r\n    .attr(\"dy\", \"0.35em\")\r\n    .attr(\"text-anchor\", \"middle\")\r\n    .style(\"font-size\", \"14px\")\r\n    .style(\"fill\", \"#fff\") // White text for better visibility\r\n    .text(d => `${((d.data.count / total) * 100).toFixed(1)}%`);\r\n};\r\n  // Append text labels on the slices\r\n  // arcs.append(\"text\")\r\n  //   .attr(\"transform\", d => `translate(${arcGenerator.centroid(d)})`)\r\n  //   .attr(\"dy\", \"0.35em\")\r\n  //   .attr(\"text-anchor\", \"middle\")\r\n  //   .text(d => d.data.Species);\r\n\r\n// Create the legend\r\nconst createLegend = (pieData) => {\r\n  const legend = d3.select(\".legend\");\r\n\r\n  pieData.forEach((d, i) => {\r\n    const legendItem = legend.append(\"div\").attr(\"class\", \"legend-item\");\r\n\r\n    legendItem.append(\"div\")  // Use div instead of rect\r\n      .style(\"width\", \"20px\")\r\n      .style(\"height\", \"20px\")\r\n      .style(\"background-color\", color(d.Species))\r\n      .style(\"display\", \"inline-block\")\r\n      .style(\"margin-right\", \"10px\");\r\n\r\n    legendItem.append(\"span\")\r\n      .text(d.Species)\r\n      .style(\"font-size\", \"16px\");\r\n  });\r\n};\r\n\r\n// Main function to fetch data and draw the chart\r\nconst main = async () => {\r\n  const pieData = await parseData();\r\n  drawChart(pieData);\r\n  createLegend(pieData);\r\n};\r\n\r\nmain();\r\n"],"names":[],"version":3,"file":"Activity 7 Question 1.c36f364e.js.map","sourceRoot":"/__parcel_source_root/"}